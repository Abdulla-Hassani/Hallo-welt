#!/usr/bin/env pybricks-micropython
from pybricks.hubs import EV3Brick
from pybricks.ev3devices import (Motor, TouchSensor, ColorSensor,
                                 InfraredSensor, UltrasonicSensor, GyroSensor)
from pybricks.nxtdevices import LightSensor
from pybricks.parameters import Port, Stop, Direction, Button, Color
from pybricks.tools import wait, StopWatch, DataLog
from pybricks.robotics import DriveBase
from pybricks.media.ev3dev import SoundFile, ImageFile

# This program requires LEGO EV3 MicroPython v2.0 or higher.
# Click "Open user guide" on the EV3 extension tab for more information.

# Create your objects here.
ev3 = EV3Brick()

# Write your program here.
ev3.speaker.beep()
arm_motor=Motor(Port.B, Direction.COUNTERCLOCKWISE,[8,40])
greifer_motor= Motor(Port.C)
left_motor= Motor(Port.D)
right_motor= Motor(Port.A)
robot = DriveBase(left_motor,right_motor,wheel_diameter=55, axle_track=130)
light_sensor=LightSensor(Port.S1)
ultrasonic_sensor=UltrasonicSensor(Port.S3)
color_sensor=ColorSensor(Port.S4)
StopBrake= Stop.BRAKE
def driveforward(speed, rotation_angle):
        left_motor= Motor(Port.D)
        right_motor= Motor(Port.A)
        left_motor.run_angle(speed,rotation_angle,Stop.COAST,False)
        right_motor.run_angle(speed,rotation_angle,Stop.COAST,False)
arm_motor.control.limits(speed=20, acceleration=100)
Black=0
White=40
Rot=50
midnumber=(Black+White)/2
DRIVE_SPEED=10
PROPOTIONAL_GAIN=1.2
arm_motor.run_time(0,1000)
arm_motor.run(10)
# while light_sensor.reflection()<30:
#     wait(10)
greifer_motor.run_until_stalled(100,then=Stop.HOLD, duty_limit=50)
greifer_motor.position=0
# arm_motor.hold()
# greifer_motor.reset_angle(0)
#تاحدی حرکت میکندکه دیگر گنجایش ندارد و بعد میاستد و بعد دوباره به موقعیت اولی اش برمگیردد
greifer_motor.reset_angle(0)
# greifer_motor.run_target(30,-70)
def robot_pick(position):
        greifer_motor.run_target(100,-70)
        arm_motor.run_target(30,4) 
        greifer_motor.run_until_stalled(200,then=Stop.HOLD, duty_limit=50)
        arm_motor.run_target(20,40)
def robot_release(position):
        arm_motor.run_target(20, -40)
        greifer_motor.run_target(100,70)
        arm_motor.run_target(20,40)

DOWN = 20
UP = -20
while True:
        if ultrasonic_sensor.distance()>80:
                deviation=color_sensor.reflection()-midnumber
                turn_rate=PROPOTIONAL_GAIN*deviation
                robot.drive(DRIVE_SPEED,turn_rate)      
        elif ultrasonic_sensor.distance()==50:
                robot.stop()
                left_motor.brake()
                right_motor.brake()
                robot_pick(UP)
        if light_sensor.reflection()<45:
                arm_motor.run(20)
        elif light_sensor.reflection()>45:
                arm_motor.run(-20)
        if light_sensor.reflection()==45:
                arm_motor.hold()
        elif ultrasonic_sensor.distance()==100:
                robot_release(DOWN)


# while not light_sensor.reflection()==35:
#         arm_motor.run(20)

# while True:
#         if light_sensor.reflection()<35:
#                 arm_motor.run(20)
#         elif light_sensor.reflection()>35:
#                 arm_motor.run(-20)
#         if light_sensor.reflection()==35:
#                 arm_motor.hold()
