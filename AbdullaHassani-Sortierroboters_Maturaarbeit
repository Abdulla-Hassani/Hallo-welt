#!/usr/bin/env pybricks-micropython
import random
from pybricks.hubs import EV3Brick
from pybricks.ev3devices import Motor, ColorSensor, TouchSensor, InfraredSensor, UltrasonicSensor, GyroSensor
from pybricks.nxtdevices import LightSensor
from pybricks.parameters import Port, Stop, Direction, Button, Color
from pybricks.tools import wait, StopWatch, DataLog
from pybricks.robotics import DriveBase
from pybricks.media.ev3dev import SoundFile, ImageFile
# Write your program here.
ev3= EV3Brick()
ev3.speaker.beep()
arm_motor=Motor(Port.B, Direction.COUNTERCLOCKWISE,[8,35])
greifer_motor= Motor(Port.C)
left_motor= Motor(Port.D)
right_motor= Motor(Port.A)                                      #Motoren und Sensoren werden difiniert
light_sensor=LightSensor(Port.S2)
ultrasonic_sensor=UltrasonicSensor(Port.S3)
color_sensor_s4=ColorSensor(Port.S4)
color_sensor_s1= ColorSensor(Port.S1)
BLACK = Color.BLACK
GREEN= Color.GREEN
BLUE  = Color.BLUE                                              # Die Definition der Farben
YELLOW = Color.YELLOW
RED = Color.RED
arm_motor.control.limits(speed=20, acceleration=100)
UP = -20
Black=0                                                        # Reflexion der Strahlungen in Prozent
White=40
DRIVE_SPEED=80
PROPOTIONAL_GAIN=1.4                                           # Beschleunigung des linken Motors um das 1.4 Fache der normalen Geschwindigkeit
midnumber=(Black+White)/2                                      # der Schnittwert 
arm_motor.run_time(0,1000)
arm_motor.run(10)
arm_motor.hold()
robot = DriveBase(left_motor,right_motor,wheel_diameter=43, axle_track=120)
# arm_motor.control.limits (speed=20, acceleration=100)
greifer_motor.run_until_stalled(100,then=Stop.HOLD, duty_limit=50) # der Greifer wird zugeklappt
greifer_motor.position=0                                           # Startpunkt als Nullpunkt
greifer_motor.reset_angle(0)
color_sensor_s1.color()                                            # Aktivierung der Farbsensoren
color_sensor_s4.color()
def robot_pick(position):                                          
        greifer_motor.run_target(100,-80)
        arm_motor.run_target(30,-5)                                # etwas aufheben
        greifer_motor.run_until_stalled(200,then=Stop.HOLD, duty_limit=50)
        arm_motor.run_target(20,40)
def robot_release(position):
        arm_motor.run_target(20,4)
        greifer_motor.run_target(100,-80)                          # etwas runterlassen
        arm_motor.run_target(20,40)
        greifer_motor.run_target(100,-80)
while True:
        if light_sensor.reflection()<81:
                arm_motor.run(5)
        elif light_sensor.reflection()>81:                         # Armposition wird kontroliert
                arm_motor.run(-5)
        if 80<=light_sensor.reflection()<=81:
                arm_motor.hold()
                deviation=color_sensor_s4.reflection()-midnumber
                turn_rate=PROPOTIONAL_GAIN*deviation               # entlang einer Linie fahren
                robot.drive(DRIVE_SPEED,turn_rate)
                color_sensor_s4.color()
                if deviation<10:
                        robot.turn(-10)                             # Fahrt an Linkskurven, in meiner Arbeit habe ich die Wert (-2) verwendet
                                                                   # kann auch einen grösseren Wert gewählt werden
                ultrasonic_sensor.distance()
                if ultrasonic_sensor.distance()<=60:               # ein Objekt erkennen
                        robot.straight(60)
                        robot.stop()
                        left_motor.hold()                          # der Roboter stoppt
                        right_motor.hold()
                        robot_pick(UP)                             # ein Objekt wird aufgenommen
                        color_sensor_s1.color()
                        color_sensor_s4.color()                    # die Farbsensoren bestimmen die Farben
                        while color_sensor_s4.color()!=RED:     
                                deviation=color_sensor_s4.reflection()-midnumber 
                                turn_rate=PROPOTIONAL_GAIN*deviation
                                robot.drive(DRIVE_SPEED,turn_rate)
                                color_sensor_s1.color()
                                ultrasonic_sensor.distance()
                                if deviation<10:
                                        robot.turn(-10)           # kommt zum zweiten Mal vor, nach meiner Teste habe ich das wiederholdend geschrieben
                                if ultrasonic_sensor.distance()<=60:
                                        robot.straight(60)
                                        robot.stop()
                                        left_motor.hold()
                                        right_motor.hold()
                                        robot_pick(UP)
                                        color_sensor_s1.color()
                                if color_sensor_s4.color()==GREEN: # die grüne Fläche "Anweisungsstelle" wird abgetastet
                                        while color_sensor_s1.color()==GREEN: # Wennn das Objekt grün ist ...
                                                robot.straight(470)           # der Roboter fährt geradeaus
                                                robot.turn(-90)              # .... dreht sich um 90 Grad
                                                robot_release(UP)             # das Objekt wird runtergelassen
                                                robot.turn(90)
                                                robot.straight(-470)          # ... fährt zurück
                                                robot.straight(40)
                                        while color_sensor_s1.color()==BLACK: # Wenn das Objekt schwarz ist ...
                                                robot.straight(470)
                                                robot.turn(-90)
                                                robot.straight(200)
                                                robot_release(UP)
                                                robot.straight(-200)
                                                robot.turn(90)
                                                robot.straight(-470)
                                                robot.straight(40)                   
                                        while color_sensor_s1.color()==YELLOW: # Wenn das Objekt gelb ist ...
                                                robot.turn(-90)
                                                robot.straight(300)
                                                robot.turn(90)
                                                robot.straight(300)
                                                robot_release(UP)
                                                robot.straight(-300)
                                                robot.turn(-90)
                                                robot.straight(-300)
                                                robot.turn(90)
                                                robot.straight(40)
                                        while color_sensor_s1.color()==RED:    # Wenn das Objekt rot ist ...
                                                robot.turn(-85)
                                                robot.straight(500)
                                                robot_release(UP)
                                                robot.straight(-500)
                                                robot.turn(85)
                                                robot.straight(40)
                                        if ultrasonic_sensor.distance()<=60:    # Wenn etwas vor dem Roboter steht
                                                robot.straight(60)
                                                robot.stop()
                                                left_motor.hold()
                                                right_motor.hold()
                                                robot_pick(UP)
                ultrasonic_sensor.distance()
                if color_sensor_s4.color()==RED:                                # der Roboter erreicht die rote Stelle
                        robot_release(UP)
                        break                                                   # das Pogramm wird beendet
